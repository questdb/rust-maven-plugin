<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~     ___                  _   ____  ____
  ~    / _ \ _   _  ___  ___| |_|  _ \| __ )
  ~   | | | | | | |/ _ \/ __| __| | | |  _ \
  ~   | |_| | |_| |  __/\__ \ |_| |_| | |_) |
  ~    \__\_\\__,_|\___||___/\__|____/|____/
  ~
  ~  Copyright (c) 2014-2019 Appsicle
  ~  Copyright (c) 2019-2023 QuestDB
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~  http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.questdb</groupId>
    <artifactId>rust-maven-example</artifactId>
    <version>1.0.9</version>
    <packaging>jar</packaging>

    <name>Rust Maven Plugin Usage Example</name>
    <description>A Java command line tool with a string reverse function written in Rust bridged over JNI.</description>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <scm>
        <url>https://github.com/questdb/rust-maven-plugin</url>
        <connection>scm:git:https://github.com/questdb/rust-maven-plugin.git</connection>
        <developerConnection>scm:git:https://github.com/questdb/rust-maven-plugin.git</developerConnection>
        <tag>1.0.9</tag>
    </scm>

    <dependencies>
        <dependency>
            <groupId>org.questdb</groupId>
            <artifactId>jar-jni</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                The Rust Maven Plugin

                Here it'll build the `str-reverse` crate and place the cdylib in the target's "classes" directory.
                Placing it there will have Maven automatically bundle the compiled code in the Jar.
            -->
            <plugin>
                <groupId>org.questdb</groupId>
                <artifactId>rust-maven-plugin</artifactId>
                <version>${project.version}</version>
                <executions>
                    <execution>
                        <id>str-reverse</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <!--
                                Notes:
                                  * All paths are relative to ${project.basedir}
                                  * Spacing around double dashes to satisfy the XML parser.
                            -->

                            <!--
                                If you need to, you can customize the path to the Cargo command
                                Otherwise by default it will be searched for in the PATH.
                            -->
                            <!-- <cargoPath>/custom/path/to/rust/bin/cargo</cargoPath> -->

                            <!--
                                The path to the Rust crate we want to build (which will contain a Cargo.toml).
                            -->
                            <path>src/main/rust/str-reverse</path>

                            <!--
                                Passes `- - release` to `cargo build` to create a release build.

                                The default is to just call `cargo build` producing a debug build.
                                Many of the other `cargo build` options are also supported.
                                E.g. ` - - features` and ` - - no-default-features`.
                            -->
                            <release>true</release>

                            <!--
                                Copy the generated binaries to the "classes" directory in the build target.
                                We use this path because it will be bundled automatically into the final jar.
                            -->
                            <copyTo>${project.build.directory}/classes/io/questdb/example/rust/libs</copyTo>

                            <!--
                                Further nest copy into a child directory named through the target's platform.
                                The directory name is computed by the `io.questdb.jar.jni.OsInfo.platform()` method.
                            -->
                            <copyWithPlatformDir>true</copyWithPlatformDir>

                            <!--
                                Additional environment variables used when calling `cargo build`.
                            -->
                            <environmentVariables>
                                <REVERSED_STR_PREFIX>Great Scott, A reversed string!</REVERSED_STR_PREFIX>
                            </environmentVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- The plugin can also be used to compile binaries. -->
                        <id>str-reverse-binary</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <path>src/main/rust/str-reverse-binary</path>
                            <release>true</release>
                            <copyTo>${project.build.directory}/bin</copyTo>
                            <features>
                                <feature>header</feature>
                                <feature>footer</feature>
                            </features>
                        </configuration>
                    </execution>
                    <execution>
                        <id>str-reverse-test</id>

                        <!--
                            This execution will run the `cargo test` command on the crate.
                            This is useful for running unit tests written in Rust.
                        -->
                        <goals>
                            <goal>test</goal>
                        </goals>

                        <configuration>
                            <!--
                                Path to the crate.
                                One you've genenrally built earlier with a
                                <goal>build</goal> execution.
                            -->
                            <path>src/main/rust/str-reverse</path>

                            <!-- Specify `true` to test a release (rather than debug) build. -->
                            <release>false</release>

                            <verbosity>-v</verbosity>

                            <environmentVariables>
                                <REVERSED_STR_PREFIX>Testing prefix</REVERSED_STR_PREFIX>
                            </environmentVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>